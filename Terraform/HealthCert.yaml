Resources:
  HealthCertNetwork:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: HealthCertNetwork
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref HealthCertNetwork
      Tags:
        - Key: Name
          Value: Subred_Publica
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref HealthCertNetwork
      Tags:
        - Key: Name
          Value: Subred_Privada
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Internet_Gateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref HealthCertNetwork
      InternetGatewayId: !Ref InternetGateway
  NATEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: NAT_Gateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref HealthCertNetwork
      Tags:
        - Key: Name
          Value: PublicRouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref HealthCertNetwork
      Tags:
        - Key: Name
          Value: PrivateRouteTable
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  bastionhostsg:
    Type: AWS::EC2::SecurityGroup
    DependsOn: HealthCertNetwork
    Properties:
      GroupDescription: Permite el acceso por SSH al Bastion Host
      VpcId: !Ref HealthCertNetwork
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: bastionhostsg
  BHKP:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: BhKey
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0dfdc165e7af15242
      InstanceType: t2.micro
      KeyName: !Ref BHKP
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref PublicSubnet
          GroupSet: 
            - !Ref bastionhostsg
        - DeviceIndex: 1
          SubnetId: !Ref PrivateSubnet
          GroupSet: 
            - !Ref bastionhostsg
          PrivateIpAddress: 10.0.2.5
      UserData: !Base64 |
        #!/bin/bash
        sudo yum update
        sudo yum upgrade -y
        amazon-linux-extras install -y epel
        sudo yum install ssh
        sudo systemctl enable ssh
        sudo systemctl start ssh
        sudo systemctl restart ssh
        # Actualiza el sistema
        sudo yum update -y
        # Instala el agente de CloudWatch Logs
        sudo yum install -y awslogs
        # Configura el agente de CloudWatch Logs
        sudo tee /etc/awslogs/awslogs.conf <<EOF
        [general]
        state_file = /var/lib/awslogs/agent-state
        [/var/log/messages]
        log_group_name = /var/log/health_cert
        log_stream_name = {instance_id}
        file = /var/log/messages
        datetime_format = %b %d %H:%M:%S
        [/var/log/cloud-init.log]
        log_group_name = /var/log/health_cert
        log_stream_name = {instance_id}-cloud-init
        file = /var/log/cloud-init.log
        datetime_format = %Y-%m-%dT%H:%M:%S.%f
        EOF
        # Configura la región de CloudWatch Logs
        sudo tee /etc/awslogs/awscli.conf <<EOF
        [plugins]
        cwlogs = cwlogs
        [default]
        region = eu-west-1
        EOF
        # Reinicia el servicio de CloudWatch Logs para aplicar los cambios
        sudo service awslogs restart
        # Habilita el servicio de CloudWatch Logs para que se inicie en el arranque
        sudo chkconfig awslogs on
        # Hostname deseado
        DESIRED_HOSTNAME="SRV-ENR"
        # Función para verificar si una contraseña cumple con los requisitos
        check_password() {
            password=$1
            # Comprobar si la contraseña tiene la cantidad de caracteres necesarios
            if [ ${#password} -lt 8 ]; then
                echo "CONTRASEÑA MALA: La contraseña contiene menos de 8 caracteres"
                return 1
            fi
            # Comprobar si contiene al menos 1 mayuscula
            if ! [[ $password =~ [[:upper:]] ]]; then
                echo "MALA CONTRASEÑA: Contiene menos de 1 letra mayúscula"
                return 1
            fi
            # Comprobar si la contraseña se encuentra en el diccionario
            if grep -q "^$password$" /usr/share/dict/words; then
                echo "DEBUG: Contraseña encontrada en el diccionario: $password"
                echo "MALA CONTRASEÑA: La contraseña es demasiado fácil o fácilmente adivinable"
                return 1
            else
                echo "DEBUG: Contraseña no encontrada en el diccionario: $password"
            fi
            # Si todas las comprobaciones pasan, devuelve exito
            return 0
        }
        echo "@@@@@@ $DESIRED_HOSTNAME @@@@@@"
        yum update -y
        # Evita la aparicion del servicio udisks2 y reinicia automaticamente
        sudo NEEDRESTART_MODE=a yum dist-upgrade --assumeyes
        # Configura el nombre de host de la instancia
        if [ -n "$DESIRED_HOSTNAME" ]; then
            echo "$DESIRED_HOSTNAME" > /etc/hostname
            hostnamectl set-hostname "$DESIRED_HOSTNAME"
            sed -i "s/127.0.0.1 localhost/127.0.0.1 localhost $DESIRED_HOSTNAME/g" /etc/hosts
        fi
        # PAM
        # Complejidad de la contraseña (usando módulos PAM)
        # Instala los paquetes necesarios
        yum install -y libpwquality
        # Configura PAM
        sed -i '/pam_pwquality.so/d' /etc/pam.d/common-password
        echo "password requisite pam_pwquality.so retry=3 minlen=8 maxrepeat=3 ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-1 difok=3 gecoscheck=1 reject_username enforce_for_root" >> /etc/pam.d/common-password
        # Añade un diccionario personalizado para los ajustes de contraseña
        custom_dict="/usr/share/dict/custom-dict"
        cat << EOF >> "$custom_dict"
        HealthCert
        Healthcert
        HEALTHCERT
        hEALTHCERT
        HealthCert1
        HealthCert2
        HealthCert3
        HealthCert4
        HealthCert5
        HealthCert6
        HealthCert7
        HealthCert8
        HealthCert9
        HealthCert0
        HealthCert123
        HealthCert1234
        HealthCert12345
        HealthCert123456
        HealthCert2018
        HealthCert2019
        HealthCert2020
        HealthCert2021
        HealthCert2022
        HealthCert2023
        HealthCert2024
        HealthCert01
        HealthCert02
        HealthCert03
        HealthCert04
        HealthCert05
        HealthCert06
        HealthCert07
        HealthCert08
        HealthCert09
        HealthCert10
        HealthCert11
        HealthCert12
        HealthCert13
        HealthCert14
        HealthCert15
        HealthCert16
        HealthCert17
        HealthCert18
        HealthCert19
        HealthCert20
        HealthCert21
        HealthCert22
        HealthCert23
        HealthCert24
        HealthCert25
        HealthCert26
        HealthCert27
        HealthCert28
        HealthCert29
        HealthCert30
        HealthCert31
        HealthCert!
        HealthCert@
        HealthCert#
        HealthCert$
        HealthCert!@
        HealthCert!@#
        HealthCert!@#$
        HealthCert123!
        HealthCert!123
        HealthCert1@
        HealthCert2018!
        HealthCert2019!
        HealthCert2020!
        HealthCert2021!
        HealthCert2022!
        HealthCert!2018
        HealthCert!2019
        HealthCert!2020
        HealthCert!2021
        HealthCert!2022
        HealthCert!2023
        HealthCert!2024
        HealthCert2018!@#
        HealthCert2019!@#
        HealthCert2020!@#
        HealthCert2021!@#
        HealthCert2022!@#
        HealthCert2023!@#
        HealthCert2024!@#
        HealthCert01!
        HealthCert02!
        HealthCert03!
        HealthCert04!
        HealthCert05!
        HealthCert06!
        HealthCert07!
        HealthCert08!
        HealthCert09!
        HealthCert10!
        HealthCert11!
        HealthCert12!
        HealthCert13!
        HealthCert14!
        HealthCert15!
        HealthCert16!
        HealthCert17!
        HealthCert18!
        HealthCert19!
        HealthCert20!
        HealthCert21!
        HealthCert22!
        HealthCert23!
        HealthCert24!
        HealthCert25!
        HealthCert26!
        HealthCert27!
        HealthCert28!
        HealthCert29!
        HealthCert30!
        HealthCert31!
        Healthcert1
        Healthcert2
        Healthcert3
        Healthcert4
        Healthcert5
        Healthcert6
        Healthcert7
        Healthcert8
        Healthcert9
        Healthcert0
        Healthcert123
        Healthcert1234
        Healthcert12345
        Healthcert123456
        Healthcert2018
        Healthcert2019
        Healthcert2020
        Healthcert2021
        Healthcert2022
        Healthcert2023
        Healthcert2024
        Healthcert!
        Healthcert@
        Healthcert#
        Healthcert$
        Healthcert!@
        Healthcert!@#
        Healthcert!@#$
        Healthcert123!
        Healthcert!123
        Healthcert1@
        Healthcert2018!
        Healthcert2019!
        Healthcert2020!
        Healthcert2021!
        Healthcert2022!
        Healthcert!2018
        Healthcert!2019
        Healthcert!2020
        Healthcert!2021
        Healthcert!2022
        Healthcert!2023
        Healthcert!2024
        Healthcert2018!@#
        Healthcert2019!@#
        Healthcert2020!@#
        Healthcert2021!@#
        Healthcert2022!@#
        Healthcert2023!@#
        Healthcert2024!@#
        Healthcert01!
        Healthcert02!
        Healthcert03!
        Healthcert04!
        Healthcert05!
        Healthcert06!
        Healthcert07!
        Healthcert08!
        Healthcert09!
        Healthcert10!
        Healthcert11!
        Healthcert12!
        Healthcert13!
        Healthcert14!
        Healthcert15!
        Healthcert16!
        Healthcert17!
        Healthcert18!
        Healthcert19!
        Healthcert20!
        Healthcert21!
        Healthcert22!
        Healthcert23!
        Healthcert24!
        Healthcert25!
        Healthcert26!
        Healthcert27!
        Healthcert28!
        Healthcert29!
        Healthcert30!
        Healthcert31!
        Healthcert01
        Healthcert02
        Healthcert03
        Healthcert04
        Healthcert05
        Healthcert06
        Healthcert07
        Healthcert08
        Healthcert09
        Healthcert10
        Healthcert11
        Healthcert12
        Healthcert13
        Healthcert14
        Healthcert15
        Healthcert16
        Healthcert17
        Healthcert18
        Healthcert19
        Healthcert20
        Healthcert21
        Healthcert22
        Healthcert23
        Healthcert24
        Healthcert25
        Healthcert26
        Healthcert27
        Healthcert28
        Healthcert29
        Healthcert30
        Healthcert31
        EOF
        sort -u -o "$custom_dict" "$custom_dict"
        create-cracklib-dict /usr/share/dict/custom-dict /usr/share/dict/cracklib-small
        #Zabbix
        # Variables
        ZABBIX_VERSION="6.0"  # Specify the Zabbix version you want to install
        ZABBIX_SERVER_IP="10.0.2.10"  # Replace with the IP address of your Zabbix server
        # Update the system
        sudo yum update -y
        # Install prerequisites
        sudo yum install -y wget
        # Download the Zabbix repository package
        wget https://repo.zabbix.com/zabbix/$ZABBIX_VERSION/rhel/9/x86_64/zabbix-release-$ZABBIX_VERSION-1.el9.noarch.rpm
        # Install the Zabbix repository
        sudo rpm -Uvh zabbix-release-$ZABBIX_VERSION-1.el9.noarch.rpm
        # Clean the repository cache
        sudo yum clean all
        # Install the Zabbix agent
        sudo yum install -y zabbix-agent
        # Configure the Zabbix agent
        sudo sed -i "s/^Server=.*/Server=$ZABBIX_SERVER_IP/" /etc/zabbix/zabbix_agentd.conf
        sudo sed -i "s/^ServerActive=.*/ServerActive=$ZABBIX_SERVER_IP/" /etc/zabbix/zabbix_agentd.conf
        sudo sed -i "s/^Hostname=.*/Hostname=$(hostname)/" /etc/zabbix/zabbix_agentd.conf
        # Enable and start the Zabbix agent service
        sudo systemctl enable zabbix-agent
        sudo systemctl start zabbix-agent
        # Verify the Zabbix agent is running
        sudo systemctl status zabbix-agent
        # Telegram
        # Token y chat_id de Telegram
        TELEGRAM_BOT_TOKEN="6835637516:AAFCs4xax9K37Xq3p2Sgkqt_8gVjAhYhB7A"
        TELEGRAM_CHAT_ID="5089735569"
        # Mensaje a enviar
        MESSAGE="El script de configuración se ha ejecutado con éxito en $DESIRED_HOSTNAME."
        # Envia el mensaje utilizando la API de Telegram
        curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage -d chat_id=$TELEGRAM_CHAT_ID -d text="$MESSAGE"
        # Actualizacion de PAM
        sudo pam-auth-update --force --package pwquality
        echo "Script ejecutado con éxito."
  ZabbixSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite SSH desde el bastion host, trafico HTTP/HTTPS y trafico Zabbix
      VpcId: !Ref HealthCertNetwork
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt bastionhostsg.GroupId
        - IpProtocol: tcp
          FromPort: 10050
          ToPort: 10050
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Zabbix_Server_SG
  ZSKP:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: ZSKey
  ZabbixServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0607a9783dd204cae
      InstanceType: t2.micro
      KeyName: !Ref ZSKP
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          SubnetId: !Ref PrivateSubnet
          DeviceIndex: 0
          PrivateIpAddress: 10.0.2.10
          GroupSet:
            - !Ref ZabbixSG
      UserData: !Base64 |
        #!/bin/bash
        # Hostnme deseado
        DESIRED_HOSTNAME="ZABBIX-SRV"
        # Funcion para checkear si una contraseña pasa los requerimientos
        check_password() {
            password=$1
            # Comprueba si la contraseña tiene la cantidad de caracteres necesarios
            if [ ${#password} -lt 8 ]; then
                echo "CONTRASEÑA MALA: La contraseña contiene menos de 8 caracteres"
                return 1
            fi
            # Comprueba si contiene al menos 1 mayúscula
            if ! [[ $password =~ [[:upper:]] ]]; then
                echo "MALA CONTRASEÑA: Contiene menos de 1 letra mayúscula"
                return 1
            fi
            # Comprueba si la contraseña se encuentra en el diccionario
            if grep -q "^$password$" /usr/share/dict/words; then
                echo "DEBUG: Contraseña encontrada en el diccionario: $password"
                echo "MALA CONTRASEÑA: La contraseña es muy fácil o fácilmente adivinable"
                return 1
            else
                echo "DEBUG: Contraseña no encontrada en el diccionario: $password"
            fi
            # Si todas las comprobaciones pasan, retorna éxito
            return 0
        }
        echo "@@@@@@ $DESIRED_HOSTNAME @@@@@@"
        apt update -y
        # Prevents the popup of udisks2.service and automates the restart of it
        sudo NEEDRESTART_MODE=a apt dist-upgrade --assumeyes
        # Configure the hostname of the instance
        if [ -n "$DESIRED_HOSTNAME" ]; then
            echo "$DESIRED_HOSTNAME" > /etc/hostname
            hostnamectl set-hostname "$DESIRED_HOSTNAME"
            sed -i "s/127.0.0.1 localhost/127.0.0.1 localhost $DESIRED_HOSTNAME/g" /etc/hosts
        fi
        #PAM
        # Password Complexity (Using PAM modules)
        # Install necessary packages
        apt install libpam-pwquality -y
        # Configure PAM
        sed -i '/pam_pwquality.so/d' /etc/pam.d/common-password
        echo "password requisite pam_pwquality.so retry=3 minlen=8 maxrepeat=3 ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-1 difok=3 gecoscheck=1 reject_username enforce_for_root" >> /etc/pam.d/common-password
        #Añadimos un diccionario Personalizado para los ajustes de Contraseña.
        custom_dict="/usr/share/dict/custom-dict"
        cat << EOF >> "$custom_dict"
        HealthCert
        Healthcert
        HEALTHCERT
        hEALTHCERT
        HealthCert1
        HealthCert2
        HealthCert3
        HealthCert4
        HealthCert5
        HealthCert6
        HealthCert7
        HealthCert8
        HealthCert9
        HealthCert0
        HealthCert123
        HealthCert1234
        HealthCert12345
        HealthCert123456
        HealthCert2018
        HealthCert2019
        HealthCert2020
        HealthCert2021
        HealthCert2022
        HealthCert2023
        HealthCert2024
        HealthCert01
        HealthCert02
        HealthCert03
        HealthCert04
        HealthCert05
        HealthCert06
        HealthCert07
        HealthCert08
        HealthCert09
        HealthCert10
        HealthCert11
        HealthCert12
        HealthCert13
        HealthCert14
        HealthCert15
        HealthCert16
        HealthCert17
        HealthCert18
        HealthCert19
        HealthCert20
        HealthCert21
        HealthCert22
        HealthCert23
        HealthCert24
        HealthCert25
        HealthCert26
        HealthCert27
        HealthCert28
        HealthCert29
        HealthCert30
        HealthCert31
        HealthCert!
        HealthCert@
        HealthCert#
        HealthCert$
        HealthCert!@
        HealthCert!@#
        HealthCert!@#$
        HealthCert123!
        HealthCert!123
        HealthCert1@
        HealthCert2018!
        HealthCert2019!
        HealthCert2020!
        HealthCert2021!
        HealthCert2022!
        HealthCert!2018
        HealthCert!2019
        HealthCert!2020
        HealthCert!2021
        HealthCert!2022
        HealthCert!2023
        HealthCert!2024
        HealthCert2018!@#
        HealthCert2019!@#
        HealthCert2020!@#
        HealthCert2021!@#
        HealthCert2022!@#
        HealthCert2023!@#
        HealthCert2024!@#
        HealthCert01!
        HealthCert02!
        HealthCert03!
        HealthCert04!
        HealthCert05!
        HealthCert06!
        HealthCert07!
        HealthCert08!
        HealthCert09!
        HealthCert10!
        HealthCert11!
        HealthCert12!
        HealthCert13!
        HealthCert14!
        HealthCert15!
        HealthCert16!
        HealthCert17!
        HealthCert18!
        HealthCert19!
        HealthCert20!
        HealthCert21!
        HealthCert22!
        HealthCert23!
        HealthCert24!
        HealthCert25!
        HealthCert26!
        HealthCert27!
        HealthCert28!
        HealthCert29!
        HealthCert30!
        HealthCert31!
        Healthcert1
        Healthcert2
        Healthcert3
        Healthcert4
        Healthcert5
        Healthcert6
        Healthcert7
        Healthcert8
        Healthcert9
        Healthcert0
        Healthcert123
        Healthcert1234
        Healthcert12345
        Healthcert123456
        Healthcert2018
        Healthcert2019
        Healthcert2020
        Healthcert2021
        Healthcert2022
        Healthcert2023
        Healthcert2024
        Healthcert!
        Healthcert@
        Healthcert#
        Healthcert$
        Healthcert!@
        Healthcert!@#
        Healthcert!@#$
        Healthcert123!
        Healthcert!123
        Healthcert1@
        Healthcert2018!
        Healthcert2019!
        Healthcert2020!
        Healthcert2021!
        Healthcert2022!
        Healthcert!2018
        Healthcert!2019
        Healthcert!2020
        Healthcert!2021
        Healthcert!2022
        Healthcert!2023
        Healthcert!2024
        Healthcert2018!@#
        Healthcert2019!@#
        Healthcert2020!@#
        Healthcert2021!@#
        Healthcert2022!@#
        Healthcert2023!@#
        Healthcert2024!@#
        Healthcert01!
        Healthcert02!
        Healthcert03!
        Healthcert04!
        Healthcert05!
        Healthcert06!
        Healthcert07!
        Healthcert08!
        Healthcert09!
        Healthcert10!
        Healthcert11!
        Healthcert12!
        Healthcert13!
        Healthcert14!
        Healthcert15!
        Healthcert16!
        Healthcert17!
        Healthcert18!
        Healthcert19!
        Healthcert20!
        Healthcert21!
        Healthcert22!
        Healthcert23!
        Healthcert24!
        Healthcert25!
        Healthcert26!
        Healthcert27!
        Healthcert28!
        Healthcert29!
        Healthcert30!
        Healthcert31!
        Healthcert01
        Healthcert02
        Healthcert03
        Healthcert04
        Healthcert05
        Healthcert06
        Healthcert07
        Healthcert08
        Healthcert09
        Healthcert10
        Healthcert11
        Healthcert12
        Healthcert13
        Healthcert14
        Healthcert15
        Healthcert16
        Healthcert17
        Healthcert18
        Healthcert19
        Healthcert20
        Healthcert21
        Healthcert22
        Healthcert23
        Healthcert24
        Healthcert25
        Healthcert26
        Healthcert27
        Healthcert28
        Healthcert29
        Healthcert30
        Healthcert31
        EOF
        sort -u -o "$custom_dict" "$custom_dict"
        create-cracklib-dict /usr/share/dict/custom-dict /usr/share/dict/cracklib-small
        # Actualización de PAM
        sudo pam-auth-update --force --package pwquality
        #SSH
        sudo apt install -y ssh
        sudo systemctl enable ssh
        sudo systemctl start ssh
        sudo systemctl restart ssh
        #INSTALAR ZABBIX SERVER
        # Variables
        DB_NAME="zabbix_HC"
        DB_USER="s.garcia_HC"
        DB_PASS="43]iO_eGya(rP,U"
        ZBX_SERVER_IP="127.0.0.1"
        TIMEZONE="Europe/Madrid"
        sudo apt update
        sudo apt -y upgrade
        sudo apt -y install wget gnupg2
        wget https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu22.04_all.deb
        sudo dpkg -i zabbix-release_6.0-4+ubuntu22.04_all.deb
        sudo apt update
        sudo apt -y install zabbix-server-pgsql zabbix-frontend-php zabbix-apache-conf zabbix-sql-scripts zabbix-agent postgresql
        sudo -i -u postgres psql -c "CREATE DATABASE ${DB_NAME};"
        sudo -i -u postgres psql -c "CREATE USER ${DB_USER} WITH PASSWORD '${DB_PASS}';"
        sudo -i -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME} TO ${DB_USER};"
        zcat /usr/share/doc/zabbix-sql-scripts/postgresql/server.sql.gz | sudo -u postgres psql ${DB_NAME}
        sudo sed -i "s/# DBPassword=/DBPassword=${DB_PASS}/" /etc/zabbix/zabbix_server.conf
        sudo systemctl restart zabbix-server zabbix-agent
        sudo systemctl enable zabbix-server zabbix-agent
        sudo sed -i "s/^;date.timezone =$/date.timezone = ${TIMEZONE}/" /etc/php/*/apache2/php.ini
        sudo systemctl restart apache2
        sudo tee /etc/zabbix/web/zabbix.conf.php <<EOL
        <?php
        // Zabbix GUI configuration file.
        \$DB['TYPE'] = 'POSTGRESQL';
        \$DB['SERVER'] = 'localhost';
        \$DB['PORT'] = '5432';
        \$DB['DATABASE'] = '${DB_NAME}';
        \$DB['USER'] = '${DB_USER}';
        \$DB['PASSWORD'] = '${DB_PASS}';
        \$DB['SCHEMA'] = '';
        \$ZBX_SERVER = '${ZBX_SERVER_IP}';
        \$ZBX_SERVER_PORT = '10051';
        \$ZBX_SERVER_NAME = 'Zabbix Server';
        \$IMAGE_FORMAT_DEFAULT = IMAGE_FORMAT_PNG;
        ?>
        EOL
        # Telegram
        # Token y chat_id de Telegram
        TELEGRAM_BOT_TOKEN="6835637516:AAFCs4xax9K37Xq3p2Sgkqt_8gVjAhYhB7A"
        TELEGRAM_CHAT_ID="5089735569"
        # Mensaje a enviar
        MESSAGE="El script de configuración ha sido ejecutado con éxito en  $DESIRED_HOSTNAME."
        # Envía el mensaje utilizando la API de Telegram
        curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage -d chat_id=$TELEGRAM_CHAT_ID -d text="$MESSAGE"
        echo "Script executed successfully."
  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite SSH desde el Bastion Host, trafico Zabbix Server y HTTP/HTTPS
      VpcId: !Ref HealthCertNetwork
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt bastionhostsg.GroupId
        - IpProtocol: tcp
          FromPort: 10050
          ToPort: 10050
          CidrIp: 10.0.2.10/24
        - IpProtocol: tcp
          FromPort: 10051
          ToPort: 10051
          CidrIp: 10.0.2.10/24
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: 10.0.2.10/24
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: WebServer_SG
  WSKP:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: WSKey
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0607a9783dd204cae
      InstanceType: t2.micro
      KeyName: !Ref WSKP
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          SubnetId: !Ref PrivateSubnet
          DeviceIndex: 0
          PrivateIpAddress: 10.0.2.20
          GroupSet:
            - !Ref WebServerSG
      UserData: !Base64 |
        #!/bin/bash
        # Main script
        # Hostnme deseado
        DESIRED_HOSTNAME="Web-SRV"
        # Función para checkear si una contraseña pasa los requerimientos
        check_password() {
            password=$1
            # Comprueba si la contraseña tiene la cantidad de caracteres necesarios
            if [ ${#password} -lt 8 ]; then
                echo "CONTRASEÑA MALA: La contraseña contiene menos de 8 caracteres"
                return 1
            fi
            # Comprueba si contiene al menos 1 mayúscula
            if ! [[ $password =~ [[:upper:]] ]]; then
                echo "MALA CONTRASEÑA: Contiene menos de 1 letra mayúscula"
                return 1
            fi
            # Comprueba si la contraseña se encuentra en el diccionario
            if grep -q "^$password$" /usr/share/dict/words; then
                echo "DEBUG: Contraseña encontrada en el diccionario: $password"
                echo "MALA CONTRASEÑA: La contraseña es muy fácil o fácilmente adivinable"
                return 1
            else
                echo "DEBUG: Contraseña no encontrada en el diccionario: $password"
            fi
            # Si todas las comprobaciones pasan, retorna éxito
            return 0
        }
        echo "@@@@@@ $DESIRED_HOSTNAME @@@@@@"
        apt update
        # Prevents the popup of udisks2.service and automates the restart of it
        sudo NEEDRESTART_MODE=a apt-get dist-upgrade --yes
        # Configure the hostname of the instance
        if [ -n "$DESIRED_HOSTNAME" ]; then
            echo "$DESIRED_HOSTNAME" > /etc/hostname
            hostnamectl set-hostname "$DESIRED_HOSTNAME"
            sed -i "s/127.0.0.1 localhost/127.0.0.1 localhost $DESIRED_HOSTNAME/g" /etc/hosts
        fi
        #PAM
        # Password Complexity (Using PAM modules)
        # Install necessary packages
        apt install libpam-pwquality -y
        # Configure PAM
        sed -i '/pam_pwquality.so/d' /etc/pam.d/common-password
        echo "password requisite pam_pwquality.so retry=3 minlen=8 maxrepeat=3 ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-1 difok=3 gecoscheck=1 reject_username enforce_for_root" >> /etc/pam.d/common-password
        #Añadimos un diccionario Personalizado para los ajustes de Contraseña.
        custom_dict="/usr/share/dict/custom-dict"
        cat << EOF >> "$custom_dict"
        HealthCert
        Healthcert
        HEALTHCERT
        hEALTHCERT
        HealthCert1
        HealthCert2
        HealthCert3
        HealthCert4
        HealthCert5
        HealthCert6
        HealthCert7
        HealthCert8
        HealthCert9
        HealthCert0
        HealthCert123
        HealthCert1234
        HealthCert12345
        HealthCert123456
        HealthCert2018
        HealthCert2019
        HealthCert2020
        HealthCert2021
        HealthCert2022
        HealthCert2023
        HealthCert2024
        HealthCert01
        HealthCert02
        HealthCert03
        HealthCert04
        HealthCert05
        HealthCert06
        HealthCert07
        HealthCert08
        HealthCert09
        HealthCert10
        HealthCert11
        HealthCert12
        HealthCert13
        HealthCert14
        HealthCert15
        HealthCert16
        HealthCert17
        HealthCert18
        HealthCert19
        HealthCert20
        HealthCert21
        HealthCert22
        HealthCert23
        HealthCert24
        HealthCert25
        HealthCert26
        HealthCert27
        HealthCert28
        HealthCert29
        HealthCert30
        HealthCert31
        HealthCert!
        HealthCert@
        HealthCert#
        HealthCert$
        HealthCert!@
        HealthCert!@#
        HealthCert!@#$
        HealthCert123!
        HealthCert!123
        HealthCert1@
        HealthCert2018!
        HealthCert2019!
        HealthCert2020!
        HealthCert2021!
        HealthCert2022!
        HealthCert!2018
        HealthCert!2019
        HealthCert!2020
        HealthCert!2021
        HealthCert!2022
        HealthCert!2023
        HealthCert!2024
        HealthCert2018!@#
        HealthCert2019!@#
        HealthCert2020!@#
        HealthCert2021!@#
        HealthCert2022!@#
        HealthCert2023!@#
        HealthCert2024!@#
        HealthCert01!
        HealthCert02!
        HealthCert03!
        HealthCert04!
        HealthCert05!
        HealthCert06!
        HealthCert07!
        HealthCert08!
        HealthCert09!
        HealthCert10!
        HealthCert11!
        HealthCert12!
        HealthCert13!
        HealthCert14!
        HealthCert15!
        HealthCert16!
        HealthCert17!
        HealthCert18!
        HealthCert19!
        HealthCert20!
        HealthCert21!
        HealthCert22!
        HealthCert23!
        HealthCert24!
        HealthCert25!
        HealthCert26!
        HealthCert27!
        HealthCert28!
        HealthCert29!
        HealthCert30!
        HealthCert31!
        Healthcert1
        Healthcert2
        Healthcert3
        Healthcert4
        Healthcert5
        Healthcert6
        Healthcert7
        Healthcert8
        Healthcert9
        Healthcert0
        Healthcert123
        Healthcert1234
        Healthcert12345
        Healthcert123456
        Healthcert2018
        Healthcert2019
        Healthcert2020
        Healthcert2021
        Healthcert2022
        Healthcert2023
        Healthcert2024
        Healthcert!
        Healthcert@
        Healthcert#
        Healthcert$
        Healthcert!@
        Healthcert!@#
        Healthcert!@#$
        Healthcert123!
        Healthcert!123
        Healthcert1@
        Healthcert2018!
        Healthcert2019!
        Healthcert2020!
        Healthcert2021!
        Healthcert2022!
        Healthcert!2018
        Healthcert!2019
        Healthcert!2020
        Healthcert!2021
        Healthcert!2022
        Healthcert!2023
        Healthcert!2024
        Healthcert2018!@#
        Healthcert2019!@#
        Healthcert2020!@#
        Healthcert2021!@#
        Healthcert2022!@#
        Healthcert2023!@#
        Healthcert2024!@#
        Healthcert01!
        Healthcert02!
        Healthcert03!
        Healthcert04!
        Healthcert05!
        Healthcert06!
        Healthcert07!
        Healthcert08!
        Healthcert09!
        Healthcert10!
        Healthcert11!
        Healthcert12!
        Healthcert13!
        Healthcert14!
        Healthcert15!
        Healthcert16!
        Healthcert17!
        Healthcert18!
        Healthcert19!
        Healthcert20!
        Healthcert21!
        Healthcert22!
        Healthcert23!
        Healthcert24!
        Healthcert25!
        Healthcert26!
        Healthcert27!
        Healthcert28!
        Healthcert29!
        Healthcert30!
        Healthcert31!
        Healthcert01
        Healthcert02
        Healthcert03
        Healthcert04
        Healthcert05
        Healthcert06
        Healthcert07
        Healthcert08
        Healthcert09
        Healthcert10
        Healthcert11
        Healthcert12
        Healthcert13
        Healthcert14
        Healthcert15
        Healthcert16
        Healthcert17
        Healthcert18
        Healthcert19
        Healthcert20
        Healthcert21
        Healthcert22
        Healthcert23
        Healthcert24
        Healthcert25
        Healthcert26
        Healthcert27
        Healthcert28
        Healthcert29
        Healthcert30
        Healthcert31
        EOF
        sort -u -o "$custom_dict" "$custom_dict"
        create-cracklib-dict /usr/share/dict/custom-dict /usr/share/dict/cracklib-small
        #SSH
        sudo apt install -y ssh
        sudo systemctl enable ssh
        sudo systemctl start ssh
        sudo systemctl restart ssh
        #Zabbix Agent
        # Actualizar el sistema
        sudo apt update
        sudo apt upgrade -y
        # Instalar el paquete Zabbix Agent
        sudo apt install -y zabbix-agent
        # Configurar el archivo de configuración del Zabbix Agent
        sudo cp /etc/zabbix/zabbix_agentd.conf /etc/zabbix/zabbix_agentd.conf.backup  # Realiza una copia de seguridad del archivo de configuración original
        sudo sed -i 's/^Server=.*/Server=10.0.2.10/' /etc/zabbix/zabbix_agentd.conf  # Configura el parámetro Server con la IP del servidor Zabbix
        # Opcionalmente, puedes configurar otros parámetros aquí
        # Reiniciar el servicio del agente Zabbix
        sudo systemctl restart zabbix-agent
        # Verificar el estado del servicio
        sudo systemctl status zabbix-agent
        # Actualización de PAM
        sudo pam-auth-update --force --package pwquality
        #APACHE
        sudo apt update
        sudo apt install -y apache2
        sudo systemctl enable apache2
        sudo systemctl start apache2
        sudo ufw allow 'Apache Full'
        sudo systemctl status apache2
        #Cloudwatch
        # Actualiza el sistema
        sudo apt-get update
        # Instala el agente de CloudWatch Logs
        sudo apt-get install -y awslogs
        # Configura el agente de CloudWatch Logs
        sudo tee /etc/awslogs/awslogs.conf <<EOF
        [general]
        state_file = /var/lib/awslogs/agent-state
        [/var/log/syslog]
        log_group_name = /var/log/health_cert
        log_stream_name = {instance_id}
        file = /var/log/syslog
        datetime_format = %b %d %H:%M:%S
        [/var/log/cloud-init.log]
        log_group_name = /var/log/health_cert
        log_stream_name = {instance_id}-cloud-init
        file = /var/log/cloud-init.log
        datetime_format = %Y-%m-%dT%H:%M:%S.%f
        EOF
        # Configura la región de CloudWatch Logs
        sudo tee /etc/awslogs/awscli.conf <<EOF
        [plugins]
        cwlogs = cwlogs
        [default]
        region = eu-west-1
        EOF
        # Reinicia el servicio de CloudWatch Logs para aplicar los cambios
        sudo systemctl restart awslogs
        # Habilita el servicio de CloudWatch Logs para que se inicie en el arranque
        sudo systemctl enable awslogs
        # Telegram
        # Token y chat_id de Telegram
        TELEGRAM_BOT_TOKEN="6835637516:AAFCs4xax9K37Xq3p2Sgkqt_8gVjAhYhB7A"
        TELEGRAM_CHAT_ID="5089735569"
        # Mensaje a enviar
        MESSAGE="El script de configuración ha sido ejecutado con éxito en  $DESIRED_HOSTNAME."
        # Envía el mensaje utilizando la API de Telegram
        curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage -d chat_id=$TELEGRAM_CHAT_ID -d text="$MESSAGE"
        echo "Script executed successfully."
  HCDBCluster:
    Type: AWS::DocDB::DBCluster
    Properties:
      DBClusterIdentifier: hcdb-cluster
      EngineVersion: 4.0.0
      MasterUsername: HCDB_Admin
      MasterUserPassword: aZeN,C'9kFw~bzñU
      PreferredBackupWindow: 07:00-09:00
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref WebServerSG
      Tags:
        - Key: Name
          Value: HCDB
  HealthCertLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /var/log/health_cert
      RetentionInDays: 30

  CloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: cloudwatch_logs_role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action: sts:AssumeRole

  CloudWatchLogsPolicy:
    Type: AWS::IAM::Policy
    DependsOn: CloudWatchLogsRole
    Properties:
      PolicyName: CloudWatchLogsPolicy
      Roles:
        - !Ref CloudWatchLogsRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:PutSubscriptionFilter
            Resource: !GetAtt HealthCertLogGroup.Arn

  InstanceLogsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn: CloudWatchLogsPolicy
    Properties:
      LogGroupName: !Ref HealthCertLogGroup
      FilterPattern: ''
      DestinationArn: !GetAtt HealthCertLogGroup.Arn
      RoleArn: !GetAtt CloudWatchLogsRole.Arn
