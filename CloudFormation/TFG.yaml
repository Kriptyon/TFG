AWSTemplateFormatVersion: '2010-09-09'
Resources:
  HealthCertNetwork:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: HealthCertNetwork

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Internet_Gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref HealthCertNetwork
      InternetGatewayId: !Ref InternetGateway

  NATEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PublicBastionEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PublicZabbixEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: NAT_Gateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref HealthCertNetwork
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subred_Publica

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1b
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref HealthCertNetwork
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subred_Publica2

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref HealthCertNetwork
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Subred_Privada

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1b
      CidrBlock: 10.0.4.0/24
      VpcId: !Ref HealthCertNetwork
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Subred_Privada2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref HealthCertNetwork
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref HealthCertNetwork
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  bastionhostsg:
    Type: AWS::EC2::SecurityGroup
    DependsOn: HealthCertNetwork
    Properties:
      GroupDescription: Permite el acceso por SSH al Bastion Host
      VpcId: !Ref HealthCertNetwork
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 10050
          ToPort: 10050
          CidrIp: 10.0.3.0/24
        - IpProtocol: tcp
          FromPort: 10051
          ToPort: 10051
          CidrIp: 10.0.3.0/24
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: bastionhostsg

  BastionHostInterface1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet
      GroupSet:
        - !Ref bastionhostsg
      Tags:
        - Key: Name
          Value: BastionHostInterface1

  BastionHostInterface2:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PrivateSubnet
      GroupSet:
        - !Ref bastionhostsg
      Tags:
        - Key: Name
          Value: BastionHostInterface2

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0dfdc165e7af15242
      InstanceType: t2.micro
      KeyName: BHKP
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref BastionHostInterface1
          DeviceIndex: 0
        - NetworkInterfaceId: !Ref BastionHostInterface2
          DeviceIndex: 1
      IamInstanceProfile: !Ref CWInstanceProfile
      UserData: !Base64 |
        #!/bin/bash
        # Actualizar la lista de paquetes e instalar curl si es necesario
        dnf update -y
        dnf install -y curl
        # Descargar el script desde GitHub
        curl -o /home/ec2-user/scriptBH.sh https://raw.githubusercontent.com/Kriptyon/TFG/main/CloudFormation/Scripts/scriptBH.sh
        # Dar permisos de ejecución al script
        chmod +x /home/ec2-user/scriptBH.sh
        # Ejecutar el script
        /home/ec2-user/scriptBH.sh

  EIPAssociationBastionHost:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt PublicBastionEIP.AllocationId
      NetworkInterfaceId: !Ref BastionHostInterface1

  ZabbixSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite SSH desde el bastion host, trafico HTTP/HTTPS y trafico Zabbix
      VpcId: !Ref HealthCertNetwork
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt bastionhostsg.GroupId
        - IpProtocol: tcp
          FromPort: 10050
          ToPort: 10050
        - IpProtocol: tcp
          FromPort: 10051
          ToPort: 10051
          CidrIp: 10.0.3.0/24
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Zabbix_Server_SG

  ZabbixServerInterface1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet
      GroupSet:
        - !Ref ZabbixSG
      Tags:
        - Key: Name
          Value: ZabbixServerInterface1

  ZabbixServerInterface2:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PrivateSubnet
      GroupSet:
        - !Ref ZabbixSG
      PrivateIpAddress: 10.0.3.10
      Tags:
        - Key: Name
          Value: ZabbixServerInterface2

  ZabbixServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0607a9783dd204cae
      InstanceType: t2.micro
      KeyName: ZSKP
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref ZabbixServerInterface1
          DeviceIndex: 0
        - NetworkInterfaceId: !Ref ZabbixServerInterface2
          DeviceIndex: 1
      UserData: !Base64 |
        #!/bin/bash
        # Actualizar la lista de paquetes e instalar curl si es necesario
        apt-get update -y
        apt-get install -y curl
        # Descargar el script desde GitHub
        curl -o /home/ubuntu/SCRIPT-ZABBIX.sh https://raw.githubusercontent.com/Kriptyon/TFG/main/CloudFormation/Scripts/SCRIPT-ZABBIX.sh
        # Dar permisos de ejecución al script
        chmod +x /home/ubuntu/SCRIPT-ZABBIX.sh
        # Ejecutar el script
        /home/ubuntu/SCRIPT-ZABBIX.sh

  EIPAssociationZabbix:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt PublicZabbixEIP.AllocationId
      NetworkInterfaceId: !Ref ZabbixServerInterface1

  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite SSH desde el Bastion Host, trafico Zabbix Server y HTTP/HTTPS
      VpcId: !Ref HealthCertNetwork
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt bastionhostsg.GroupId
        - IpProtocol: tcp
          FromPort: 10050
          ToPort: 10050
          CidrIp: 10.0.1.10/24
        - IpProtocol: tcp
          FromPort: 10051
          ToPort: 10051
          CidrIp: 10.0.1.10/24
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: 10.0.1.10/24
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: WebServer_SG

  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0607a9783dd204cae
      InstanceType: t2.micro
      KeyName: WSKP
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          SubnetId: !Ref PrivateSubnet
          DeviceIndex: 0
          PrivateIpAddress: 10.0.3.20
          GroupSet:
            - !Ref WebServerSG
      UserData: !Base64 |
        #!/bin/bash
        # Actualizar la lista de paquetes e instalar curl si es necesario
        apt-get update -y
        apt-get install -y curl
        # Descargar el script desde GitHub
        curl -o /home/ubuntu/SCRIPT-WEB.sh https://raw.githubusercontent.com/Kriptyon/TFG/main/CloudFormation/Scripts/SCRIPT-WEB.sh
        # Dar permisos de ejecución al script
        chmod +x /home/ubuntu/SCRIPT-WEB.sh
        # Ejecutar el script
        /home/ubuntu/SCRIPT-WEB.sh

  HealthCertLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /var/log/health_cert
      RetentionInDays: 30

  CWRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudWatchRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LogsCloudWatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: PermitirGestionDeLogs
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:GetLogEvents
                  - logs:PutRetentionPolicy
                  - logs:PutLogEvents
                Resource: arn:aws:logs:eu-west-1:767397746354:log-group:/var/log/health

  CWInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref CWRole